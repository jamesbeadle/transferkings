type UpdateAgentDTO = record {};
type SwapClientFocusDTO = record {};
type Result_5 = 
 variant {
   err: Error;
   ok: AddContractDTO;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: AgentDTO;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: vec ContractDTO;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: bool;
 };
type Result_1 = 
 variant {
   err: Error;
   ok;
 };
type Result = 
 variant {
   err: Error;
   ok: UpdateAgentDTO;
 };
type PromoteClientDTO = record {};
type PrincipalId = text;
type PlayerId = nat;
type GetContractsDTO = record {};
type Error = 
 variant {
   AlreadyExists;
   DecodeError;
   InvalidData;
   NotAllowed;
   NotAuthorized;
   NotEnoughFunds;
   NotFound;
   PaymentError;
 };
type EndContractDTO = record {};
type CreateAgentDTO = 
 record {
   agentName: text;
   displayName: text;
   profilePicture: opt blob;
   profilePictureExtension: text;
 };
type ContractLimits = 
 record {
   academyContractMax: nat;
   allStarContractMax: nat;
   lowerLeagueContractMax: nat;
   prospectsContractMax: nat;
   squadPlayerContractMax: nat;
 };
type ContractDTO = record {};
type Contract = record {playerId: PlayerId;};
type AgentDTO = 
 record {
   agencyId: opt AgencyId;
   agentName: text;
   contractLimits: ContractLimits;
   contracts: vec Contract;
   createDate: int;
   displayName: text;
   principalId: PrincipalId;
   profilePicture: opt blob;
   profilePictureExtension: text;
 };
type AgencyId = nat;
type AddContractDTO = record {};
service : {
  addContract: (AddContractDTO) -> (Result_5);
  createAgent: (CreateAgentDTO) -> (Result_1);
  endContract: (EndContractDTO) -> (Result_1);
  getAgent: () -> (Result_4) query;
  getContracts: (GetContractsDTO) -> (Result_3) query;
  isAgentNameTaken: (text) -> (Result_2) query;
  promoteClient: (PromoteClientDTO) -> (Result_1);
  swapClientFocus: (SwapClientFocusDTO) -> (Result_1);
  updateAgent: (UpdateAgentDTO) -> (Result);
}
